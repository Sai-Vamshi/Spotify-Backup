"""
Django settings for Spotify project.

Generated by 'django-admin startproject' using Django 2.0.3.

For more information on this file, see
https://docs.djangoproject.com/en/2.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.0/ref/settings/
"""

import os
import json

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
data = open('yellowant_app_credentials.json').read()
data_json = json.loads(data)

BASE_HREF = "/"

# Local deployment settings
app_name = os.environ.get("HEROKU_APP_NAME")
BASE_URL = "https://{}.herokuapp.com".format(app_name)
SITE_PROTOCOL = "https://"

### YellowAnt specific settings ###
# URL to obtain oauth2 access for a YA user
YA_OAUTH_URL = "https://www.yellowant.com/api/oauth2/authorize/"
# URL to receive oauth2 codes from YA for user authentication. As a developer,
# you need to provide this URL in the YA
# developer console so that YA knows exactly where to send the oauth2 codes.
DEV_ENV = os.environ.get('ENV', 'DEV')

if DEV_ENV=="DEV":

    BASE_URL = "https://1cce4427.ngrok.io/"
    SPOTIFY_CLIENT_ID = "765624123a91487fa470a8133cf6d177"
    SPOTIFY_CLIENT_SECRET = "1f74e8900c984a53946c1c8075f4cb5b"
    SITE_DOMAIN_URL = "ngrok.io"
elif DEV_ENV == "HEROKU":
    SPOTIFY_CLIENT_ID = os.environ.get("SPOTIFY_CLIENT_ID", "")
    SPOTIFY_CLIENT_SECRET = os.environ.get("SPOTIFY_CLIENT_SECRET", "")
    BASE_URL = "https://{}.herokuapp.com/".format(app_name)
    app_name = os.environ.get("HEROKU_APP_NAME")
    SITE_DOMAIN_URL = "herokuapp.com"



YA_CLIENT_ID = str(data_json['client_id'])
YA_CLIENT_SECRET = str(data_json['client_secret'])
YA_VERIFICATION_TOKEN = str(data_json['verification_token'])
YA_REDIRECT_URL = BASE_URL+"yellowant-oauth-redirect/"

SPOTIFY_REDIRECT_URL = BASE_URL + "yellowantredirecturl/"



# # Numerical ID generated when you register your application through the YA developer console
# YA_APP_ID = os.environ.get("YA_APP_ID", 1935)
# # Client ID generated from the YA developer console. Required to identify
# # requests from this application to YA
# YA_CLIENT_ID = os.environ.get("YA_CLIENT_ID", "w5r4cY8PTA3i3Gm68PzxkMJfLfuwSQdgK7b78lyJ")
# # Client secret generated from the YA developer console. Required to identify requests
# # from this application to YA
# YA_CLIENT_SECRET = os.environ.get("YA_CLIENT_SECRET", "aLKbg3AZH8TffFoZByeKr2XcwpxYG8PHmCUp45MXa1IfUFsUbIc3twJGWN9EZdXgaZuAIbP41ba6qBwW3WNEMi6oqnbXxckxeTWcm3LIyrJuRMvyx3EmUNdt4avZhuUK")
# # Verification token generated from the YA developer console.
# # This application can verify requests from YA as they will
# # carry the verification token
# YA_VERIFICATION_TOKEN = os.environ.get("YA_VERIFICATION_TOKEN", "MBuLl61vhJJVbHGuBoySBHg8tzLugtpB5URDWhCP6lIy7uJ3aQmKUPwfeg7h9ECQJO6TtyDlTWqge5aL3W44KM2mnixngIUlqtTClNLDS87AZFO1bL8wVIMczWG6vcUH")

BASE_HREF="/"
### END YellowAnt specific settings ###


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '%%rf5n!99s^ue309_(r+3j)iqm^^cno5k^o4=@$pvaq@l=iw5p'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

# SECURITY WARNING: remove wildcard condition from ALLOWED_HOSTS
ALLOWED_HOSTS = ["*"]


# Application definition

INSTALLED_APPS = [
    'lib.yellowant_api',
    'lib.web',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'Spotify.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'Spotify.wsgi.application'


# Database
# https://docs.djangoproject.com/en/2.0/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'spotify',
        'USER': "mysqltest",
        'PASSWORD': "pass",
        'HOST' : "localhost",
        'PORT': '',
    }
}

if DEV_ENV=="HEROKU":
    import dj_database_url
    db_from_env = dj_database_url.config()
    DATABASES['default'].update(db_from_env)
    DATABASES['default']['CONN_MAX_AGE'] = 500

# Password validation
# https://docs.djangoproject.com/en/2.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/2.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.0/howto/static-files/

STATIC_URL = '/static/'

LOGIN_REDIRECT_URL = 'home'
LOGOUT_REDIRECT_URL = 'home'
